apply plugin: 'cpp'

model {
    repositories {
        lib(PrebuiltLibraries) {
            gtest {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("/usr/lib/x86_64-linux-gnu/libgtest.a")
                }
            }
            gtest_main {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("/usr/lib/x86_64-linux-gnu/libgtest_main.a")
                }
            }
        }
    }
}

libraries {
    main
}

executables {
    test {
        binaries.all {
            linker.args "-pthread"
            lib libraries.main
            lib library: 'gtest', linkage: 'static'
            lib library: 'gtest_main', linkage: 'static'
        }
    }
}

sources {
    main {
        cpp {
            source {
                srcDir "src/main/cpp/"
                exclude "*.swp"
            }
            exportedHeaders {
                srcDir "src/main/cpp/"
            }
        }
    }
    test {
        cpp {
            source {
                srcDir "src/test/cpp/"
                exclude "**/*.swp"
            }
        }
    }
}

task checkHeaderGuards(type: com.janitovff.headerguardplugin.HeaderGuardTask)

task test(type: Exec, dependsOn: ['testExecutable', 'checkHeaderGuards']) {
    doFirst {
        def binary = executables.test.getBinaries().getAt(0)
        def executableFile = binary.getExecutableFile()

        commandLine executableFile.toString()
    }
}
