apply plugin: 'cpp'

model {
    repositories {
        lib(PrebuiltLibraries) {
            cppunit {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("/usr/lib/x86_64-linux-gnu/libcppunit.a")
                }
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("/usr/lib/x86_64-linux-gnu/libcppunit.so")
                }
            }
        }
    }
}

libraries {
    main
}

executables {
    test {
        binaries.all {
            lib libraries.main
            lib library: 'cppunit', linkage: 'shared'
        }
    }
}

sources {
    main {
        cpp {
            source {
                srcDir "src/main/cpp/"
                exclude "*.swp"
            }
            exportedHeaders {
                srcDir "src/main/cpp/"
            }
        }
    }
    test {
        cpp {
            source {
                srcDir "src/test/cpp/"
                exclude "**/*.swp"
            }
        }
    }
}

task test(type: Exec, dependsOn: 'testExecutable') {
    doFirst {
        def binary = executables.test.getBinaries().getAt(0)
        def executableFile = binary.getExecutableFile()

        commandLine executableFile.toString()
    }
}
