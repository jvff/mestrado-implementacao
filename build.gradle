apply plugin: 'cpp'

model {
    repositories {
        lib(PrebuiltLibraries) {
            gtest {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("/usr/lib/x86_64-linux-gnu/libgtest.a")
                }
            }
            fakeit {
                headers.srcDir "../../lib/fakeit/include"
                headers.srcDir "../../lib/fakeit/config/gtest"
            }
            asserts {
                headers.srcDir "../asserts/include/main/cpp"
            }
            gtest_main {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("/usr/lib/x86_64-linux-gnu/libgtest_main.a")
                }
            }
        }
    }

    components {
        main(NativeLibrarySpec) {
            sources.cpp.exportedHeaders {
                srcDir "include/main/cpp"
            }
        }
        test(NativeExecutableSpec) {
            binaries.all {
                cppCompiler.args "-std=c++11", "-Werror", "-Wall", "-Wextra",
                        "-pedantic"
                linker.args "-pthread", "-lOpenCL"
            }
            sources.cpp {
                lib library: 'main'
                lib library: 'gtest_main', linkage: 'static'
                lib library: 'gtest', linkage: 'static'
                lib library: 'fakeit', linkage: 'api'
                lib library: 'asserts', linkage: 'api'
            }
        }
    }
}

task checkHeaderGuards(type: com.janitovff.headerguardplugin.HeaderGuardTask)

task opencl2c(type: com.janitovff.opencl2cplugin.OpenCL2CTask) {
    inputDirectory = file("src/main/opencl")
    outputDirectory = file("include/main/cpp/cl")
}

task test(type: Exec,
        dependsOn: ['testExecutable', 'checkHeaderGuards', 'opencl2c']) {
    doFirst {
        def binary = binaries.getByName 'testExecutable'
        def executableFile = binary.getExecutableFile()

        commandLine executableFile.toString(), '--gtest_color=yes'
    }
}
